// Package openapi provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.4.1 DO NOT EDIT.
package openapi

import (
	"bytes"
	"compress/gzip"
	"context"
	"encoding/base64"
	"encoding/json"
	"fmt"
	"net/http"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
	"github.com/gin-gonic/gin"
	"github.com/oapi-codegen/runtime"
	strictgin "github.com/oapi-codegen/runtime/strictmiddleware/gin"
	openapi_types "github.com/oapi-codegen/runtime/types"
)

// Error Error response
type Error struct {
	// Code Application-specific error code
	Code int32 `json:"code"`

	// Message Error message
	Message string `json:"message"`
}

// User Representation of a user
type User struct {
	// Email Email address of the user
	Email openapi_types.Email `binding:"required,email,min=5,max=254" json:"email"`

	// Id Unique identifier for the user (UUIDv7)
	Id openapi_types.UUID `binding:"required,uuid" json:"id"`

	// Name Full name of the user
	Name string `binding:"required,min=1,max=100" json:"name"`
}

// UserPrototype Prototype schema for user create or update
type UserPrototype struct {
	// Email Email address of the user
	Email openapi_types.Email `binding:"required,email,min=5,max=254" json:"email"`

	// Name Full name of the user
	Name string `binding:"required,min=1,max=100" json:"name"`
}

// UserResponse Single user response
type UserResponse struct {
	// User Representation of a user
	User User `json:"user"`
}

// UsersListResponse Users list response
type UsersListResponse struct {
	Users []User `json:"users"`
}

// CreateUserJSONRequestBody defines body for CreateUser for application/json ContentType.
type CreateUserJSONRequestBody = UserPrototype

// UpdateUserByIdJSONRequestBody defines body for UpdateUserById for application/json ContentType.
type UpdateUserByIdJSONRequestBody = UserPrototype

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// List all users
	// (GET /users)
	ListUsers(c *gin.Context)
	// Create a new user
	// (POST /users)
	CreateUser(c *gin.Context)
	// Delete a user by ID
	// (DELETE /users/{user_id})
	DeleteUserById(c *gin.Context, userId openapi_types.UUID)
	// Get a user by ID
	// (GET /users/{user_id})
	GetUserById(c *gin.Context, userId openapi_types.UUID)
	// Update a user by ID
	// (PATCH /users/{user_id})
	UpdateUserById(c *gin.Context, userId openapi_types.UUID)
}

// ServerInterfaceWrapper converts contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler            ServerInterface
	HandlerMiddlewares []MiddlewareFunc
	ErrorHandler       func(*gin.Context, error, int)
}

type MiddlewareFunc func(c *gin.Context)

// ListUsers operation middleware
func (siw *ServerInterfaceWrapper) ListUsers(c *gin.Context) {

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.ListUsers(c)
}

// CreateUser operation middleware
func (siw *ServerInterfaceWrapper) CreateUser(c *gin.Context) {

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.CreateUser(c)
}

// DeleteUserById operation middleware
func (siw *ServerInterfaceWrapper) DeleteUserById(c *gin.Context) {

	var err error

	// ------------- Path parameter "user_id" -------------
	var userId openapi_types.UUID

	err = runtime.BindStyledParameterWithOptions("simple", "user_id", c.Param("user_id"), &userId, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter user_id: %w", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.DeleteUserById(c, userId)
}

// GetUserById operation middleware
func (siw *ServerInterfaceWrapper) GetUserById(c *gin.Context) {

	var err error

	// ------------- Path parameter "user_id" -------------
	var userId openapi_types.UUID

	err = runtime.BindStyledParameterWithOptions("simple", "user_id", c.Param("user_id"), &userId, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter user_id: %w", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.GetUserById(c, userId)
}

// UpdateUserById operation middleware
func (siw *ServerInterfaceWrapper) UpdateUserById(c *gin.Context) {

	var err error

	// ------------- Path parameter "user_id" -------------
	var userId openapi_types.UUID

	err = runtime.BindStyledParameterWithOptions("simple", "user_id", c.Param("user_id"), &userId, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter user_id: %w", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.UpdateUserById(c, userId)
}

// GinServerOptions provides options for the Gin server.
type GinServerOptions struct {
	BaseURL      string
	Middlewares  []MiddlewareFunc
	ErrorHandler func(*gin.Context, error, int)
}

// RegisterHandlers creates http.Handler with routing matching OpenAPI spec.
func RegisterHandlers(router gin.IRouter, si ServerInterface) {
	RegisterHandlersWithOptions(router, si, GinServerOptions{})
}

// RegisterHandlersWithOptions creates http.Handler with additional options
func RegisterHandlersWithOptions(router gin.IRouter, si ServerInterface, options GinServerOptions) {
	errorHandler := options.ErrorHandler
	if errorHandler == nil {
		errorHandler = func(c *gin.Context, err error, statusCode int) {
			c.JSON(statusCode, gin.H{"msg": err.Error()})
		}
	}

	wrapper := ServerInterfaceWrapper{
		Handler:            si,
		HandlerMiddlewares: options.Middlewares,
		ErrorHandler:       errorHandler,
	}

	router.GET(options.BaseURL+"/users", wrapper.ListUsers)
	router.POST(options.BaseURL+"/users", wrapper.CreateUser)
	router.DELETE(options.BaseURL+"/users/:user_id", wrapper.DeleteUserById)
	router.GET(options.BaseURL+"/users/:user_id", wrapper.GetUserById)
	router.PATCH(options.BaseURL+"/users/:user_id", wrapper.UpdateUserById)
}

type ListUsersRequestObject struct {
}

type ListUsersResponseObject interface {
	VisitListUsersResponse(w http.ResponseWriter) error
}

type ListUsers200JSONResponse UsersListResponse

func (response ListUsers200JSONResponse) VisitListUsersResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type ListUsers500JSONResponse Error

func (response ListUsers500JSONResponse) VisitListUsersResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

type CreateUserRequestObject struct {
	Body *CreateUserJSONRequestBody
}

type CreateUserResponseObject interface {
	VisitCreateUserResponse(w http.ResponseWriter) error
}

type CreateUser201JSONResponse UserResponse

func (response CreateUser201JSONResponse) VisitCreateUserResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(201)

	return json.NewEncoder(w).Encode(response)
}

type CreateUser400JSONResponse Error

func (response CreateUser400JSONResponse) VisitCreateUserResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response)
}

type DeleteUserByIdRequestObject struct {
	UserId openapi_types.UUID `json:"user_id"`
}

type DeleteUserByIdResponseObject interface {
	VisitDeleteUserByIdResponse(w http.ResponseWriter) error
}

type DeleteUserById204Response struct {
}

func (response DeleteUserById204Response) VisitDeleteUserByIdResponse(w http.ResponseWriter) error {
	w.WriteHeader(204)
	return nil
}

type DeleteUserById404JSONResponse Error

func (response DeleteUserById404JSONResponse) VisitDeleteUserByIdResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(response)
}

type GetUserByIdRequestObject struct {
	UserId openapi_types.UUID `json:"user_id"`
}

type GetUserByIdResponseObject interface {
	VisitGetUserByIdResponse(w http.ResponseWriter) error
}

type GetUserById200JSONResponse UserResponse

func (response GetUserById200JSONResponse) VisitGetUserByIdResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type GetUserById404JSONResponse Error

func (response GetUserById404JSONResponse) VisitGetUserByIdResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(response)
}

type UpdateUserByIdRequestObject struct {
	UserId openapi_types.UUID `json:"user_id"`
	Body   *UpdateUserByIdJSONRequestBody
}

type UpdateUserByIdResponseObject interface {
	VisitUpdateUserByIdResponse(w http.ResponseWriter) error
}

type UpdateUserById200JSONResponse UserResponse

func (response UpdateUserById200JSONResponse) VisitUpdateUserByIdResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type UpdateUserById400JSONResponse Error

func (response UpdateUserById400JSONResponse) VisitUpdateUserByIdResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response)
}

type UpdateUserById404JSONResponse Error

func (response UpdateUserById404JSONResponse) VisitUpdateUserByIdResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(response)
}

// StrictServerInterface represents all server handlers.
type StrictServerInterface interface {
	// List all users
	// (GET /users)
	ListUsers(ctx context.Context, request ListUsersRequestObject) (ListUsersResponseObject, error)
	// Create a new user
	// (POST /users)
	CreateUser(ctx context.Context, request CreateUserRequestObject) (CreateUserResponseObject, error)
	// Delete a user by ID
	// (DELETE /users/{user_id})
	DeleteUserById(ctx context.Context, request DeleteUserByIdRequestObject) (DeleteUserByIdResponseObject, error)
	// Get a user by ID
	// (GET /users/{user_id})
	GetUserById(ctx context.Context, request GetUserByIdRequestObject) (GetUserByIdResponseObject, error)
	// Update a user by ID
	// (PATCH /users/{user_id})
	UpdateUserById(ctx context.Context, request UpdateUserByIdRequestObject) (UpdateUserByIdResponseObject, error)
}

type StrictHandlerFunc = strictgin.StrictGinHandlerFunc
type StrictMiddlewareFunc = strictgin.StrictGinMiddlewareFunc

func NewStrictHandler(ssi StrictServerInterface, middlewares []StrictMiddlewareFunc) ServerInterface {
	return &strictHandler{ssi: ssi, middlewares: middlewares}
}

type strictHandler struct {
	ssi         StrictServerInterface
	middlewares []StrictMiddlewareFunc
}

// ListUsers operation middleware
func (sh *strictHandler) ListUsers(ctx *gin.Context) {
	var request ListUsersRequestObject

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.ListUsers(ctx, request.(ListUsersRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "ListUsers")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(ListUsersResponseObject); ok {
		if err := validResponse.VisitListUsersResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// CreateUser operation middleware
func (sh *strictHandler) CreateUser(ctx *gin.Context) {
	var request CreateUserRequestObject

	var body CreateUserJSONRequestBody
	if err := ctx.ShouldBindJSON(&body); err != nil {
		ctx.Status(http.StatusBadRequest)
		ctx.Error(err)
		return
	}
	request.Body = &body

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.CreateUser(ctx, request.(CreateUserRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "CreateUser")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(CreateUserResponseObject); ok {
		if err := validResponse.VisitCreateUserResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// DeleteUserById operation middleware
func (sh *strictHandler) DeleteUserById(ctx *gin.Context, userId openapi_types.UUID) {
	var request DeleteUserByIdRequestObject

	request.UserId = userId

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.DeleteUserById(ctx, request.(DeleteUserByIdRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "DeleteUserById")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(DeleteUserByIdResponseObject); ok {
		if err := validResponse.VisitDeleteUserByIdResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// GetUserById operation middleware
func (sh *strictHandler) GetUserById(ctx *gin.Context, userId openapi_types.UUID) {
	var request GetUserByIdRequestObject

	request.UserId = userId

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.GetUserById(ctx, request.(GetUserByIdRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetUserById")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(GetUserByIdResponseObject); ok {
		if err := validResponse.VisitGetUserByIdResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// UpdateUserById operation middleware
func (sh *strictHandler) UpdateUserById(ctx *gin.Context, userId openapi_types.UUID) {
	var request UpdateUserByIdRequestObject

	request.UserId = userId

	var body UpdateUserByIdJSONRequestBody
	if err := ctx.ShouldBindJSON(&body); err != nil {
		ctx.Status(http.StatusBadRequest)
		ctx.Error(err)
		return
	}
	request.Body = &body

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.UpdateUserById(ctx, request.(UpdateUserByIdRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "UpdateUserById")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(UpdateUserByIdResponseObject); ok {
		if err := validResponse.VisitUpdateUserByIdResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"H4sIAAAAAAAC/+RXW2/bOBP9K8R8fWjxSbJ8axIBBZqst4UXBbZokafUXdDSyGYhkSpJeW0E+u8LkrIj",
	"y3JzqQtssC+2SPEy58yZi24hFnkhOHKtILoFFS8xp/bxdymFNA8JqliyQjPBIXLTRKIqBFcIHhRSFCg1",
	"Q7srFgkebrosiozF1Ix8VWDMUhYTtCfZDR6kQuZUQwSM6+EAPMjpmuVlDlE/DEMPcsbdMPRAbwp0K3GB",
	"EioPclSKLvCYtdvXu61KS8YXUFUeSPxeMokJRDdQ27JdPtutF/NvGGtz07XCDlI+YSFRIdcWIhEpoaQ0",
	"K9v0YE5Z1mGmmSY0SSQqZbbrJW4P2DHj9lpmPiBf6CVEg/HIUrMdjz0oqNYozaFfb76+nf3/rf398iWw",
	"/y8OOPBg7QtaMN+AXyD3ca0l9TVdWIPnjCdmWbQjyrN2eDnjb8ZeTtdvBuORZZIlh8CuOfteImEJcs1S",
	"hpKkQu7QkZfX19PJ6uxVE2ZZsmQf5fD1HkgzbKIM/Qvqp5f+u9nteeU3h6PKP2uOh5V/c35xeUXns/Z0",
	"Y9gfVKegyeIwvHCadyjzXZllxLxqubuBu18Lfzfewx2cxJnGjX3rxn4YQtWOCOsKC8Cr9XcsKD5KoYV7",
	"04a6e0VcerEasP6PJVKNxAyLhGr8T8XLc9bFgyTxaVskDkB+ZnyR1TngaCkp61T7QmIKEfyvd1eqenWd",
	"6tl03DbObjxmlPrAlD5umV1CMqb0jw2zD0xjrh5monXg1K23/quNo1LSTScC1QHBplmeCnOnZjrD2mJy",
	"+XEKHqxQKgejH4RBaG4VBXJaMIhgGITBEKxUltbo3g7HAnVXTdOS4QoVoY4PkVqHqQDssdLWumkCERhK",
	"LXFgYDjW7MGDMHRNAdfI7R30rhPofVPmolvANc2LDBvU3uwiH76JJQ8SgW/rVUEscnDFBvqDIY7Gr898",
	"PL+Y+2c0TnyaYt8P+4OhmT+/oPNt/orgD7HkZCIQqlnl1Z3OQ5y3rxjrg1Z30+an8mD8WOSucRrb0N52",
	"MzDlJqppRhTKFUrXMsGDrXctXIfFR841B5d5TuWmdiqhWeZAmZRis8WNCxEwHBZCdQjnN5vUjWw4/m13",
	"HyrGrbl2qc0oH5W+EsnmcZztNEI5BipnetlSydbzlCP5bN7Dozx/V9NaCVDLEqsDrfcfr/UHofih1uk8",
	"TjB1v92IHwX5Rzp3Tktql1YejJ4m8lFb5CuaMXcsSaimJxD4FU1ILauWrB2Ihjg7lF15dXLs3Zq/v1hS",
	"OZlnqDtqxsTOq7rnJ/MNYVqR6eRQ9m6lueZqM00Os+WouyARd3NCXnJBarZfOQeMnuaAUdMB9gouNElF",
	"yZMTsN8+cM8BjoMGWdNJZ3K5tyjdR/Z71MeZDn8yVn9BVTpZnF4SdddfBc9VJ+9R3y+Sgkqao942DR3H",
	"TyfNr0xm5k0HdOeAOsKhnd+b6P7lH6dVNbO3xsuO/GE/rBShnOCaKc344t7IcXv2gudnK7RYcqqXtCto",
	"GoFgl7ho+IV1+gSxfwzLExNAA/fJsoBz4vOr1s8zWzm270tYdo9tuV2+KqUR1FLrQkW9Hi1Y0JCTGfdW",
	"fTDBXR/UDu4/t2GriMTMulsLZ0JOOV1gbgjcSc2ZUc2qfwIAAP//CQ2lX/cVAAA=",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
